//test bench for exp
`timescale 1ns / 1ps
module exponential_tb;

parameter EXPONENT_WIDTH = 5;
parameter MANTISSA_WIDTH = 10;

reg [EXPONENT_WIDTH+MANTISSA_WIDTH:0] input_value;
reg reset;
reg clock;
wire [EXPONENT_WIDTH+MANTISSA_WIDTH:0] output_value;
wire done_exp;
initial
begin
clock =1;
reset=0;
//For simple representation for test cases find test cases table below
// s ----e---- --------------f-------------
//  e^2
// s ----e---- --------------f-------------
  //input_value = 32'b01000000000000000000000000000000;
  input_value = 16'b0100000000000000;

 //  e^3
 // s ----e---- --------------f-------------
//#20 input_value = 32'b01000000010000000000000000000000;
#21 reset=1;
#1 reset=0;
input_value = 16'b0100001000000000;

//  e^3.4
// s ----e---- --------------f-------------
//#20 input_value = 32'b01000000010110011001100110011010;
#21 reset=1;
#1 reset=0;
 input_value = 16'b0100001011001101;
//  e^-2
// s ----e---- --------------f-------------
//#20 input_value = 32'b11000000000000000000000000000000;
#21 reset=1;
#1 reset=0;
input_value = 16'b1100000000000000;
//  e^-1.2
// s ----e---- --------------f-------------
//#20 input_value = 32'b10111111100110011001100110011010;
#21 reset=1;
#1 reset=0;
input_value = 16'b1011110011001101;
//  e^5
// s ----e---- --------------f-------------
//#20 input_value = 32'b01000000101000000000000000000000;
#21 reset=1;
#1 reset=0;
input_value = 16'b0100010100000000;

//  e^0.01
// s ----e---- --------------f-------------
//#20 input_value = 32'b00111100001000111101011100001010;
#21 reset=1;
#1 reset=0;
input_value = 16'b0010000100011111;

//  e^0.001
// s ----e---- --------------f-------------
//#20 input_value = 32'b00111010100000110001001001101111;
#21 reset=1;
#1 reset=0;
input_value = 16'b0001010000011001;

//  e^-0.01
// s ----e---- --------------f-------------
//#20 input_value = 32'b10111100001000111101011100001010;
#21 reset=1;
#1 reset=0;
input_value = 16'b1010000100011111;

//  e^-0.001
// s ----e---- --------------f-------------
//#20 input_value = 32'b10111010100000110001001001101111;
#21 reset=1;
#1 reset=0;
input_value = 16'b1001010000011001;

//  e^-0.4
// s ----e---- --------------f-------------
//#20 input_value = 32'b10111010100000110001001001101111;
#21 reset=1;
#1 reset=0;
input_value = 16'b1011011001100110;
#21 reset=1;
#25 $stop;
end

//Single precision Floating point test cases
// e^-0.001        |    e^-0.01    |    e^0.001      |  e^0.01        |     e^5        |  e^-1.2         |   e^-2          | e^3.4         |  e^3           |      e^2        |
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 0.999000549316  | 0.99004983902 |  1.00100040436  |  1.01005005836 | 113.118034363  | 0.301811099052  |  0.155555725098 | 28.2305774689 |  19.4124965668 | 7.35555553436   |
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//   3f7fbe80      |   3f7d73e8    |   3f8020c8      |  3f814952      | 42e23c6f       |  3e9a86fc       | 3e1f4a00        | 41e1d839      |   419b4ccb     | 40eb60b6        |


//Half precision Floating point test cases
// e^-0.001        |    e^-0.01    |    e^0.001      |  e^0.01        |     e^5        |  e^-1.2         |   e^-2          | e^3.4         |  e^3           |      e^2        |
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 0.999000549316  | 0.99004983902 |  1.00100040436  |  1.01005005836 | 113.118034363  | 0.301811099052  |  0.155555725098 | 28.2305774689 |  19.4124965668 | 7.35555553436   |
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//   3bfe          |      3bec     |       3c01      |      3c0a      |     570e       |      34d4       |     3100        |   4f0d        |   4cd9         |   475a          |

always begin
     #1  clock = ~clock; 
    end
        
//instantiate the module into the test bench
exponential #(.EXPONENT_WIDTH(EXPONENT_WIDTH), .MANTISSA_WIDTH(MANTISSA_WIDTH)) inst1 (
.input_exp(input_value),
.clk(clock),
.output_exp(output_value),
.done_exp(done_exp),
.reset_exp(reset)
);
endmodule
