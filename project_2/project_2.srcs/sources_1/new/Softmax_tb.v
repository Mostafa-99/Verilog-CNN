//test bench for exp
`timescale 1ns / 1ps
module Softmax_tb;

parameter EXPONENT_WIDTH = 5;
parameter MANTISSA_WIDTH = 10;
parameter numberOfExps=10;
parameter DATA_WIDTH = EXPONENT_WIDTH+MANTISSA_WIDTH+1;

reg [(DATA_WIDTH*numberOfExps)-1:0] input_value;
reg clock;
reg reset;

wire [(numberOfExps*DATA_WIDTH)-1:0] output_value;
wire done;
initial
begin
clock =1;

#20;
  //reset=0;
  #2 reset=1;
//  e^2
// s ----e---- --------------f-------------
 //input_value[DATA_WIDTH-1:0] = 32'b01000000000000000000000000000000;
 input_value[DATA_WIDTH-1:0] = 16'h5540;//16'b0100000000000000;
 //  e^3
 // s ----e---- --------------f-------------
 //input_value[(DATA_WIDTH*2)-1:DATA_WIDTH] = 32'b01000000010000000000000000000000;
 input_value[(DATA_WIDTH*2)-1:DATA_WIDTH] = 16'h5540;//16'b0100001000000000;

//  e^3.4
// s ----e---- --------------f-------------
 //input_value[DATA_WIDTH*3-1:DATA_WIDTH*2] = 32'b01000000010110011001100110011010;
 input_value[DATA_WIDTH*3-1:DATA_WIDTH*2] = 16'h5540;//16'b0100001011001101;

//  e^-2
// s ----e---- --------------f-------------
 //input_value[DATA_WIDTH*4-1:DATA_WIDTH*3] = 32'b11000000000000000000000000000000;
 input_value[DATA_WIDTH*4-1:DATA_WIDTH*3] = 16'h5540;//16'b1100000000000000;

//  e^-1.2
// s ----e---- --------------f-------------
 //input_value[DATA_WIDTH*5-1:DATA_WIDTH*4] = 32'b10111111100110011001100110011010;
 input_value[DATA_WIDTH*5-1:DATA_WIDTH*4] = 16'h5540;//16'b1011110011001101;
//  e^5
// s ----e---- --------------f-------------
 //input_value[DATA_WIDTH*6-1:DATA_WIDTH*5] = 32'b01000000101000000000000000000000;
 input_value[DATA_WIDTH*6-1:DATA_WIDTH*5] = 16'h5540;//16'b0100010100000000;
//  e^0.01
// s ----e---- --------------f-------------
 //input_value[DATA_WIDTH*7-1:DATA_WIDTH*6] = 32'b00111100001000111101011100001010;
 input_value[DATA_WIDTH*7-1:DATA_WIDTH*6] = 16'h5540;//16'b0010000100011111;
//  e^0.001
// s ----e---- --------------f-------------
 //input_value[DATA_WIDTH*8-1:DATA_WIDTH*7] = 32'b00111010100000110001001001101111;
 input_value[DATA_WIDTH*8-1:DATA_WIDTH*7] = 16'h5540;//16'b0001010000011001;
//  e^-0.01
// s ----e---- --------------f-------------
// input_value[DATA_WIDTH*9-1:DATA_WIDTH*8] = 32'b10111100001000111101011100001010;
 input_value[DATA_WIDTH*9-1:DATA_WIDTH*8] = 16'h5540;//16'b1010000100011111;
//  e^-0.001
// s ----e---- --------------f-------------
 //input_value[DATA_WIDTH*10-1:DATA_WIDTH*9] = 32'b10111010100000110001001001101111;
 input_value[DATA_WIDTH*10-1:DATA_WIDTH*9] = 16'h5540;//16'b1001010000011001;
#2 reset=0;
#50;
   reset=0;
   #2 reset=1;
   #2 reset=0;
#100 $stop;
end
//Single precision Floating point test cases
// e^-0.001        |    e^-0.01    |    e^0.001      |  e^0.01        |     e^5        |  e^-1.2         |   e^-2          | e^3.4         |  e^3           |      e^2        |
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 0.999000549316  | 0.99004983902 |  1.00100040436  |  1.01005005836 | 113.118034363  | 0.301811099052  |  0.155555725098 | 28.2305774689 |  19.4124965668 | 7.35555553436   |
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//   3f7fbe80      |   3f7d73e8    |   3f8020c8      |  3f814952      | 42e23c6f       |  3e9a86fc       | 3e1f4a00        | 41e1d839      |   419b4ccb     | 40eb60b6        |


//First level of addition
// 1.98905038834 | 2.01105046272 | 113.419837952 |  28.386133194 | 26.7680511475
//   3ffe9934    |   4000b50d    |   42e2d6f5    |    41e316cd   |  41d624f8

//Second level of addition
// 1.98905038834 | 115.430885315 | 55.1541824341
//   3ffe9934    |  42e6dc9d     |   425c9de2

//Third level of addition
// 1.98905038834 | 170.585067749
//   3ffe9934    |  432a95c7   
//Final sum
// 172.574111938
//   432c92f9  


//---------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------------------
//Half precision Floating point test cases
// e^-0.001        |    e^-0.01    |    e^0.001      |  e^0.01        |     e^5        |  e^-1.2         |   e^-2          | e^3.4         |  e^3           |      e^2        |
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 0.999000549316  | 0.99004983902 |  1.00100040436  |  1.01005005836 | 113.118034363  | 0.301811099052  |  0.155555725098 | 28.2305774689 |  19.4124965668 | 7.35555553436   |
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//   3bfe          |      3bec     |       3c01      |      3c0a      |     570e       |      34d4       |     3100        |   4f0d        |   4cd9         |   475a          |


//First level of addition
// 1.98905038834 | 2.01105046272 | 113.419837952 |  28.386133194 | 26.7680511475
//   3ff5        |   4005        |   5712        |    4f17       |  4eaf

//Second level of addition
// 1.98905038834 | 115.430885315 | 55.1541824341
//   3ff5        |   5732        |   52e3

//Third level of addition
// 1.98905038834 | 170.585067749
//   3ff5        |  5951   
//Final sum
// 172.574111938
//   5965  

//****************************************************************************************************
//****************************************************************************************************
//----------------------------------------------------------------------------------------------------
// Final output from softmax
//Single precision Floating point test cases
// Input:  -0.001          |    -0.01      |    0.001        |    0.01        |       5        |    -1.2         |     -2          |   3.4         |    3           |        2        |
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//OutputDec 5.7888*10^-3   | 5.7366*10^-3  |  5.8*10^-3      | 5.85255*10^-3  |   0.65547      | 1.748877*10^3   |  9.0138*10^-4   | 0.16358       |  0.11248       | 0.042622        |
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Output:   1e00          |     1e00      |     1e00        |    1e02        |     3940       |   172e          |   1370          |   3140        |   2f34         |    2979         |

always begin
     #1  clock = ~clock; 
    end
        
//instantiate the module into the test bench
Softmax #(.EXPONENT_WIDTH(EXPONENT_WIDTH), .MANTISSA_WIDTH(MANTISSA_WIDTH)) Softmax1 (
.input_exps(input_value),
.clk(clock),
.output_softmax(output_value),
.done_softmax(done),
.reset_softmax(reset)
);
endmodule
